// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientTypeDeclarations correct usage 1`] = `
"import Knex from 'knex';
import {
  AggregateBuilder,
  CreateManyBuilder,
  CreateOneBuilder,
  DeleteByIdBuilder,
  DeleteManyBuilder,
  FindByIdBuilder,
  FindManyBuilder,
  FindOneBuilder,
  UpdateByIdBuilder,
  UpdateManyBuilder
} from 'sqlmancer';

export type ID = number | string;
export type JSON = boolean | number | string | null | JSONArray | JSONObject;
export interface JSONObject {
  [key: string]: JSON;
}
export type JSONArray = Array<JSON>;

export type ActorFields = {
  id: ID;
  firstName: string;
  lastName: string;
}
    
export type ActorIds = 'id';
    
export type ActorEnums = unknown;
    
export type ActorAssociations = {
  films: [FilmFindManyBuilder, FilmAggregateBuilder];
}
    
export type ActorCreateFields = {
  id: ID;
  firstName: string;
  lastName: string;
};
    
export type ActorUpdateFields = {
  firstName?: string;
  lastName?: string;
};
    
export type ActorFindOneBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> = FindOneBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
>

export type ActorFindManyBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> = FindManyBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
>

export type ActorFindByIdBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> = FindByIdBuilder<
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
>

export type ActorAggregateBuilder = AggregateBuilder<'postgres', ActorFields, ActorIds, ActorEnums, ActorAssociations>
      
export type ActorDeleteManyBuilder = DeleteManyBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations
>

export type ActorDeleteByIdBuilder = DeleteByIdBuilder

export type ActorCreateManyBuilder = CreateManyBuilder<ActorCreateFields>

export type ActorCreateOneBuilder = CreateOneBuilder<ActorCreateFields>

export type ActorUpdateManyBuilder = UpdateManyBuilder<
  'postgres',
  ActorUpdateFields,
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations
>

export type ActorUpdateByIdBuilder = UpdateByIdBuilder<ActorUpdateFields>
  
export type FilmFields = {
  id: ID;
  title: string;
  releaseYear: number;
}
    
export type FilmIds = 'id';
    
export type FilmEnums = unknown;
    
export type FilmAssociations = {
  actors: [ActorFindManyBuilder, ActorAggregateBuilder];
}
    
export type FilmCreateFields = {
  id: ID;
  title: string;
  releaseYear: number;
};
    
export type FilmUpdateFields = {
  title?: string;
  releaseYear?: number;
};
    
export type FilmFindOneBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> = FindOneBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
>

export type FilmFindManyBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> = FindManyBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
>

export type FilmFindByIdBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> = FindByIdBuilder<
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
>

export type FilmAggregateBuilder = AggregateBuilder<'postgres', FilmFields, FilmIds, FilmEnums, FilmAssociations>
      
export type FilmDeleteManyBuilder = DeleteManyBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations
>

export type FilmDeleteByIdBuilder = DeleteByIdBuilder

export type FilmCreateManyBuilder = CreateManyBuilder<FilmCreateFields>

export type FilmCreateOneBuilder = CreateOneBuilder<FilmCreateFields>

export type FilmUpdateManyBuilder = UpdateManyBuilder<
  'postgres',
  FilmUpdateFields,
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations
>

export type FilmUpdateByIdBuilder = UpdateByIdBuilder<FilmUpdateFields>
  
export type SqlmancerClient = Knex & {
  models: {
    Actor: {
      findById: (id: ID) => ActorFindByIdBuilder;
      findMany: () => ActorFindManyBuilder;
      findOne: () => ActorFindOneBuilder;
      aggregate: () => ActorAggregateBuilder;
      createMany: (input: ActorCreateFields[]) => ActorCreateManyBuilder;
      createOne: (input: ActorCreateFields) => ActorCreateOneBuilder;
      deleteById: (id: ID) => ActorDeleteByIdBuilder;
      deleteMany: () => ActorDeleteManyBuilder;
      updateById: (id: ID, input: ActorUpdateFields) => ActorUpdateByIdBuilder;
      updateMany: (input: ActorUpdateFields) => ActorUpdateManyBuilder;
    };
    Film: {
      findById: (id: ID) => FilmFindByIdBuilder;
      findMany: () => FilmFindManyBuilder;
      findOne: () => FilmFindOneBuilder;
      aggregate: () => FilmAggregateBuilder;
      createMany: (input: FilmCreateFields[]) => FilmCreateManyBuilder;
      createOne: (input: FilmCreateFields) => FilmCreateOneBuilder;
      deleteById: (id: ID) => FilmDeleteByIdBuilder;
      deleteMany: () => FilmDeleteManyBuilder;
      updateById: (id: ID, input: FilmUpdateFields) => FilmUpdateByIdBuilder;
      updateMany: (input: FilmUpdateFields) => FilmUpdateManyBuilder;
    };
  };
};
  "
`;
