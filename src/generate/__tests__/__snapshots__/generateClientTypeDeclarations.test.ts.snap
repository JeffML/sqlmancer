// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientTypeDeclarations correct usage 1`] = `
"
import Knex from 'knex';
import {
  AggregateBuilder,
  BuilderOptions,
  CreateManyBuilder,
  CreateOneBuilder,
  DeleteByIdBuilder,
  DeleteManyBuilder,
  FindByIdBuilder,
  FindManyBuilder,
  FindOneBuilder,
  UpdateByIdBuilder,
  UpdateManyBuilder
} from 'sqlmancer';

export declare type ID = number | string;
export declare type JSON = boolean | number | string | null | JSONArray | JSONObject;
export interface JSONObject {
  [key: string]: JSON;
}
export declare type JSONArray = Array<JSON>;

export declare type ActorFields = {
  id: ID;
  firstName: string;
  lastName: string;
}
    
export declare type ActorIds = 'id';
    
export declare type ActorEnums = unknown;
    
export declare type ActorAssociations = {
  films: [FilmFindManyBuilder, FilmAggregateBuilder];
}
    
export declare type ActorCreateFields = {
  id: ID;
  firstName: string;
  lastName: string;
};
    
export declare type ActorUpdateFields = {
  firstName?: string;
  lastName?: string;
};
    
export declare class ActorFindOneBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> extends FindOneBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
> {
  constructor(options: BuilderOptions);
}

export declare class ActorFindManyBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> extends FindManyBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
> {
  constructor(options: BuilderOptions);
}

export declare class ActorFindByIdBuilder<TSelected extends Pick<ActorFields, any> = ActorFields> extends FindByIdBuilder<
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations,
  TSelected
> {
  constructor(options: BuilderOptions, pk: ID);
}

export declare class ActorAggregateBuilder<
  TSelected extends Pick<ActorFields, any> = ActorFields
> extends AggregateBuilder<'postgres', ActorFields, ActorIds, ActorEnums, ActorAssociations> {
  constructor(options: BuilderOptions);
}
      
export declare class ActorDeleteManyBuilder extends DeleteManyBuilder<
  'postgres',
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations
> {
  constructor(options: BuilderOptions);
}

export declare class ActorDeleteByIdBuilder extends DeleteByIdBuilder {
  constructor(options: BuilderOptions, pk: ID);
}

export declare class ActorCreateManyBuilder extends CreateManyBuilder<ActorCreateFields> {
  constructor(options: BuilderOptions, data: ActorCreateFields[]);
}

export declare class ActorCreateOneBuilder extends CreateOneBuilder<ActorCreateFields> {
  constructor(options: BuilderOptions, data: ActorCreateFields);
}

export declare class ActorUpdateManyBuilder extends UpdateManyBuilder<
  'postgres',
  ActorUpdateFields,
  ActorFields,
  ActorIds,
  ActorEnums,
  ActorAssociations
> {
  constructor(options: BuilderOptions, data: ActorUpdateFields);
}

export declare class ActorUpdateByIdBuilder extends UpdateByIdBuilder<ActorUpdateFields> {
  constructor(options: BuilderOptions, pk: ID, data: ActorUpdateFields);
}
  
export declare type FilmFields = {
  id: ID;
  title: string;
  releaseYear: number;
}
    
export declare type FilmIds = 'id';
    
export declare type FilmEnums = unknown;
    
export declare type FilmAssociations = {
  actors: [ActorFindManyBuilder, ActorAggregateBuilder];
}
    
export declare type FilmCreateFields = {
  id: ID;
  title: string;
  releaseYear: number;
};
    
export declare type FilmUpdateFields = {
  title?: string;
  releaseYear?: number;
};
    
export declare class FilmFindOneBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> extends FindOneBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
> {
  constructor(options: BuilderOptions);
}

export declare class FilmFindManyBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> extends FindManyBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
> {
  constructor(options: BuilderOptions);
}

export declare class FilmFindByIdBuilder<TSelected extends Pick<FilmFields, any> = FilmFields> extends FindByIdBuilder<
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations,
  TSelected
> {
  constructor(options: BuilderOptions, pk: ID);
}

export declare class FilmAggregateBuilder<
  TSelected extends Pick<FilmFields, any> = FilmFields
> extends AggregateBuilder<'postgres', FilmFields, FilmIds, FilmEnums, FilmAssociations> {
  constructor(options: BuilderOptions);
}
      
export declare class FilmDeleteManyBuilder extends DeleteManyBuilder<
  'postgres',
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations
> {
  constructor(options: BuilderOptions);
}

export declare class FilmDeleteByIdBuilder extends DeleteByIdBuilder {
  constructor(options: BuilderOptions, pk: ID);
}

export declare class FilmCreateManyBuilder extends CreateManyBuilder<FilmCreateFields> {
  constructor(options: BuilderOptions, data: FilmCreateFields[]);
}

export declare class FilmCreateOneBuilder extends CreateOneBuilder<FilmCreateFields> {
  constructor(options: BuilderOptions, data: FilmCreateFields);
}

export declare class FilmUpdateManyBuilder extends UpdateManyBuilder<
  'postgres',
  FilmUpdateFields,
  FilmFields,
  FilmIds,
  FilmEnums,
  FilmAssociations
> {
  constructor(options: BuilderOptions, data: FilmUpdateFields);
}

export declare class FilmUpdateByIdBuilder extends UpdateByIdBuilder<FilmUpdateFields> {
  constructor(options: BuilderOptions, pk: ID, data: FilmUpdateFields);
}
  
type SqlmancerClient = Knex & {
  models: {
    Actor: {
      findById: (id: ID) => ActorFindByIdBuilder;
      findMany: () => ActorFindManyBuilder;
      findOne: () => ActorFindOneBuilder;
      aggregate: () => ActorAggregateBuilder;
      createMany: (input: ActorCreateFields[]) => ActorCreateManyBuilder;
      createOne: (input: ActorCreateFields) => ActorCreateOneBuilder;
      deleteById: (id: ID) => ActorDeleteByIdBuilder;
      deleteMany: () => ActorDeleteManyBuilder;
      updateById: (id: ID, input: ActorUpdateFields) => ActorUpdateByIdBuilder;
      updateMany: (input: ActorUpdateFields) => ActorUpdateManyBuilder;
    };
    Film: {
      findById: (id: ID) => FilmFindByIdBuilder;
      findMany: () => FilmFindManyBuilder;
      findOne: () => FilmFindOneBuilder;
      aggregate: () => FilmAggregateBuilder;
      createMany: (input: FilmCreateFields[]) => FilmCreateManyBuilder;
      createOne: (input: FilmCreateFields) => FilmCreateOneBuilder;
      deleteById: (id: ID) => FilmDeleteByIdBuilder;
      deleteMany: () => FilmDeleteManyBuilder;
      updateById: (id: ID, input: FilmUpdateFields) => FilmUpdateByIdBuilder;
      updateMany: (input: FilmUpdateFields) => FilmUpdateManyBuilder;
    };
  };
};
  "
`;
