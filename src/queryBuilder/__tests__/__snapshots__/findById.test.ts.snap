// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FindByIdBuilder mysql basic queries no additional options 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join nested 1`] = `"select (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('films', (select if(json_arrayagg(\`f3\`.\`o\`) is null, json_array(), json_arrayagg(\`f3\`.\`o\`)) from (select json_object('language', (select json_extract(json_arrayagg(\`l1\`.\`o\`), '$[0]') from (select json_object() as \`o\` from \`language\` as \`l2\` where \`f4\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`)) as \`o\` from \`film\` as \`f4\` inner join \`film_actor\` as \`f5\` on \`f5\`.\`film_id\` = \`f4\`.\`film_id\` where \`a2\`.\`actor_id\` = \`f5\`.\`actor_id\` limit ?) as \`f3\`)) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` limit ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join with FK on builder table 1`] = `"select (select json_extract(json_arrayagg(\`l1\`.\`o\`), '$[0]') from (select json_object() as \`o\` from \`language\` as \`l2\` where \`f1\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`) as \`language\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join with FK on joined table 1`] = `"select (select if(json_arrayagg(\`f1\`.\`o\`) is null, json_array(), json_arrayagg(\`f1\`.\`o\`)) from (select json_object() as \`o\` from \`film\` as \`f2\` where \`l1\`.\`language_id\` = \`f2\`.\`language_id\`) as \`f1\`) as \`films\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder mysql join with additional options 1`] = `"select (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('firstName', \`a2\`.\`first_name\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` order by \`a2\`.\`first_name\` desc limit ? offset ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join with alias 1`] = `"select (select if(json_arrayagg(\`p1\`.\`o\`) is null, json_array(), json_arrayagg(\`p1\`.\`o\`)) from (select json_object() as \`o\` from \`actor\` as \`a1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a1\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`p1\`) as \`performers\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join with default builder 1`] = `"select (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object() as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql join with junction table 1`] = `"select (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object() as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql join with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo basic query 1`] = `"select \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo query with alias 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select if(json_arrayagg(\`m1\`.\`o\`) is null, json_array(), json_arrayagg(\`m1\`.\`o\`)) from (select json_object('id', \`f1\`.\`film_id\`, 'title', \`f1\`.\`title\`) as \`o\` from \`film\` as \`f1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`film_id\` = \`f1\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f2\`.\`actor_id\`) as \`m1\`) as \`movies\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo query with nested arguments 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select if(json_arrayagg(\`f1\`.\`o\`) is null, json_array(), json_arrayagg(\`f1\`.\`o\`)) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`) as \`o\` from \`film\` as \`f2\` inner join \`film_actor\` as \`f3\` on \`f3\`.\`film_id\` = \`f2\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f3\`.\`actor_id\` and \`f2\`.\`title\` = ? order by \`f2\`.\`release_year\` desc limit ? offset ?) as \`f1\`) as \`films\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select add 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select add raw 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`first_name\` as \`first_name\`, \`a1\`.\`first_name\` as \`first_name_again\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select all 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with missing field 1`] = `"select \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with multiple fields 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with no fields 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with no fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres basic queries no additional options 1`] = `"select null from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join nested 1`] = `"select (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('films', (select coalesce(nullif(json_agg(\\"f3\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('language', (select json_agg(\\"l1\\".\\"o\\") -> 0 from (select json_build_object() as \\"o\\" from \\"language\\" as \\"l2\\" where \\"f4\\".\\"language_id\\" = \\"l2\\".\\"language_id\\" limit ?) as \\"l1\\")) as \\"o\\" from \\"film\\" as \\"f4\\" inner join \\"film_actor\\" as \\"f5\\" on \\"f5\\".\\"film_id\\" = \\"f4\\".\\"film_id\\" where \\"a2\\".\\"actor_id\\" = \\"f5\\".\\"actor_id\\" limit ?) as \\"f3\\")) as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" limit ?) as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join with FK on builder table 1`] = `"select (select json_agg(\\"l1\\".\\"o\\") -> 0 from (select json_build_object() as \\"o\\" from \\"language\\" as \\"l2\\" where \\"f1\\".\\"language_id\\" = \\"l2\\".\\"language_id\\" limit ?) as \\"l1\\") as \\"language\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join with FK on joined table 1`] = `"select (select coalesce(nullif(json_agg(\\"f1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object() as \\"o\\" from \\"film\\" as \\"f2\\" where \\"l1\\".\\"language_id\\" = \\"f2\\".\\"language_id\\") as \\"f1\\") as \\"films\\" from \\"language\\" as \\"l1\\" where \\"l1\\".\\"language_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder postgres join with additional options 1`] = `"select (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('firstName', \\"a2\\".\\"first_name\\") as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" order by \\"a2\\".\\"first_name\\" desc limit ? offset ?) as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join with alias 1`] = `"select (select coalesce(nullif(json_agg(\\"p1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object() as \\"o\\" from \\"actor\\" as \\"a1\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a1\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"p1\\") as \\"performers\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join with default builder 1`] = `"select (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object() as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres join with junction table 1`] = `"select (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object() as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres join with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo basic query 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo query with alias 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", (select coalesce(nullif(json_agg(\\"m1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f1\\".\\"film_id\\", 'title', \\"f1\\".\\"title\\") as \\"o\\" from \\"film\\" as \\"f1\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"film_id\\" = \\"f1\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f2\\".\\"actor_id\\") as \\"m1\\") as \\"movies\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo query with nested arguments 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", (select coalesce(nullif(json_agg(\\"f1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f2\\".\\"film_id\\", 'title', \\"f2\\".\\"title\\") as \\"o\\" from \\"film\\" as \\"f2\\" inner join \\"film_actor\\" as \\"f3\\" on \\"f3\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f3\\".\\"actor_id\\" and \\"f2\\".\\"title\\" = ? order by \\"f2\\".\\"release_year\\" desc limit ? offset ?) as \\"f1\\") as \\"films\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select add 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"actor_id\\" as \\"id\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select add raw 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"first_name\\" as \\"first_name\\", \\"a1\\".\\"first_name\\" as \\"first_name_again\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select all 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"last_update\\" as \\"lastUpdate\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with missing field 1`] = `"select \\"a1\\".\\"last_name\\" as \\"lastName\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with multiple fields 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with no fields 1`] = `"select null from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with no fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite basic queries no additional options 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join nested 1`] = `"select (select json_group_array(\`a1\`.\`o\`) from (select json_object('films', (select json_group_array(\`f3\`.\`o\`) from (select json_object('language', (select json_extract(json_group_array(\`l1\`.\`o\`), '$[0]') from (select json_object() as \`o\` from \`language\` as \`l2\` where \`f4\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`)) as \`o\` from \`film\` as \`f4\` inner join \`film_actor\` as \`f5\` on \`f5\`.\`film_id\` = \`f4\`.\`film_id\` where \`a2\`.\`actor_id\` = \`f5\`.\`actor_id\` limit ?) as \`f3\`)) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` limit ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with FK on builder table 1`] = `"select (select json_extract(json_group_array(\`l1\`.\`o\`), '$[0]') from (select json_object() as \`o\` from \`language\` as \`l2\` where \`f1\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`) as \`language\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with FK on joined table 1`] = `"select (select json_group_array(\`f1\`.\`o\`) from (select json_object() as \`o\` from \`film\` as \`f2\` where \`l1\`.\`language_id\` = \`f2\`.\`language_id\`) as \`f1\`) as \`films\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with additional options 1`] = `"select (select json_group_array(\`a1\`.\`o\`) from (select json_object('firstName', \`a2\`.\`first_name\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` order by \`a2\`.\`first_name\` desc limit ? offset ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with alias 1`] = `"select (select json_group_array(\`p1\`.\`o\`) from (select json_object() as \`o\` from \`actor\` as \`a1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a1\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`p1\`) as \`performers\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with default builder 1`] = `"select (select json_group_array(\`a1\`.\`o\`) from (select json_object() as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite join with junction table 1`] = `"select (select json_group_array(\`a1\`.\`o\`) from (select json_object() as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite join with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo basic query 1`] = `"select \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo query with alias 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select json_group_array(\`m1\`.\`o\`) from (select json_object('id', \`f1\`.\`film_id\`, 'title', \`f1\`.\`title\`) as \`o\` from \`film\` as \`f1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`film_id\` = \`f1\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f2\`.\`actor_id\`) as \`m1\`) as \`movies\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested arguments 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select json_group_array(\`f1\`.\`o\`) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`) as \`o\` from \`film\` as \`f2\` inner join \`film_actor\` as \`f3\` on \`f3\`.\`film_id\` = \`f2\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f3\`.\`actor_id\` and \`f2\`.\`title\` = ? order by \`f2\`.\`release_year\` desc limit ? offset ?) as \`f1\`) as \`films\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select add 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select add raw 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`first_name\` as \`first_name\`, \`a1\`.\`first_name\` as \`first_name_again\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select all 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with missing field 1`] = `"select \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with multiple fields 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with no fields 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with no fields 2`] = `
Array [
  10,
  1,
]
`;
